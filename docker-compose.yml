# TODO:
# 1. Remove passwords and other sensitive data
# 2. Push into git repository
# 3. Implement deployment routine -- pull latest dotnet application from git, then build and run it (check for changes and automatically build?)
# 4. Add dataimporter to update scan data with latest scan
services:
  # NGINX webserver to serve ODNS-API
  web:
    # Stable release!
    image: nginx:1.26.3
    container_name: nginx_web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Static html page goes in here
      - ./html:/usr/share/nginx/html:ro
      # Mount folder for SSL certificates
      # Mounting point is in .env (variable replacement does not work with the env_file option)
      # (also moving .env_file up did not do the trick)
      - ${CERTIFICATE_DIR}:/etc/letsencrypt:ro
      # NGINX config to serve the ODNS-API
      - ./nginx/odnsapi.conf:/etc/nginx/conf.d/odnsapi.conf:ro
    restart: always
    depends_on:
      - dotnet_app
    networks:
      - frontend_network
      - odnsapi_network
  
  # Dotnet ODNS-API application
  dotnet_app:
    build: "https://github.com/netd-tud/odns-api.git"
    container_name: dotnet_app
    ports:
      - "5551:5551"
    restart: always
    env_file:
      - dotnet.env
    environment:
      - ASPNETCORE_URLS=http://+:5551
      - ConnectionStrings__Database="Host=postgres_db;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB};Search Path=${POSTGRES_DB};Pooling=true;MinPoolSize=1;MaxPoolSize=10;Connection Idle Lifetime=20;ApplicationName=odnsapi;Timeout=500;CommandTimeout=500;Include Error Detail=true;"
    networks:
      - odnsapi_network
      - postgresdb_network

  # Postgresql database used by the API
  # All the ODNS data goes here
  postgres_db:
    image: postgres:16
    container_name: postgres_db
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - postgresdb_network

  # PGAdmin to configure database -- runs on localhost to allow access via sshtunnel
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "5050:5050"
    restart: always
    networks:
      - local_network 
      - postgresdb_network


networks:
  # Exposed to the public -- in use by nginx
  frontend_network:
    driver: bridge
  # Internal backend network for ODNS-API and nginx
  # nginx serves as entrypoint to the ODNS-API 
  odnsapi_network:
    driver: bridge
    internal: true
  # Network used to isolate database from the public, nginx cannot connect to it
  # This network is only used to connect the ODNS-API, and pgadmin with Postgres DB
  postgresdb_network:
    driver: bridge
    internal: true
  # Network for pgadmin -- only exposed to localhost
  local_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"

