# TODO:
# 1. Remove passwords and other sensitive data
# 2. Push into git repository
# 3. Implement deployment routine -- pull latest dotnet application from git, then build and run it (check for changes and automatically build?)
# 4. Add dataimporter to update scan data with latest scan
services:
  # NGINX webserver to serve ODNS-API
  web:
    # Stable release!
    image: nginx:1.26.3
    container_name: nginx_web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Static html page goes in here
      - ./html:/usr/share/nginx/html:ro
      # Mount folder for SSL certificates
      # Mounting point is in .env (variable replacement does not work with the env_file option)
      # (also moving .env_file up did not do the trick)
      - ${CERTIFICATE_DIR}:/etc/letsencrypt:ro
      # NGINX config to serve the ODNS-API
      # use odnsapi.prod.conf for ssl and domain name
      - ./nginx/odnsapi.prod.conf:/etc/nginx/conf.d/odnsapi.conf:ro
    restart: always
    networks:
      - frontend_network
      - odnsapi_network
      - postgresdb_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      retries: 3
      start_period: 10s
    develop:
      watch:
        - path: ./html
          action: restart 
        - path: ./nginx
          action: restart
  
  # Dotnet ODNS-API application
  dotnet_app:
    build:
      context: ./odns-api
      dockerfile: Dockerfile
    container_name: dotnet_app
    restart: always
    environment:
      - Database:ConnectionString=Host=postgres_db;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB};Search Path=${POSTGRES_DB};Pooling=true;MinPoolSize=1;MaxPoolSize=100;Connection Idle Lifetime=20;ApplicationName=odnsapi;Timeout=500;CommandTimeout=500;Include Error Detail=true;
    networks:
      - odnsapi_network
      - postgresdb_network
    depends_on:
      postgres_db:
        condition: service_healthy
    develop:
      watch:
        - path: ./odns-api
          action: rebuild
    volumes:
      # Logs
      - ./logs/odnsapi:/app/logs

  # Postgresql database used by the API
  # All the ODNS data goes here
  postgres_db:
    image: postgres:16
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
      #- ./postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: always
    networks:
      - postgresdb_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      retries: 5
      start_period: 20s

  # PGAdmin to configure database -- runs on localhost to allow access via sshtunnel
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    restart: always
    networks:
      - local_network 
      - postgresdb_network

  # Container for importing odns data into postgrs db
  data_importer:
    build:
      context: ./odns-dataimporter
      dockerfile: Dockerfile
    container_name: data_importer
    restart: "no" 
    volumes:
      - odns_data:/data:rw  # Mount Samba share
      - data_importer_tmp:/tmp
      - ./logs:/logs
    networks:
      - postgresdb_network
    healthcheck:
      test: ["CMD", "python", "dataimporter.py", "--check-health"]
      interval: 1m
      retries: 3
      start_period: 20s
    develop:
      watch:
        - path: ./odns-dataimporter
          action: rebuild
    depends_on:
      postgres_db:
        condition: service_healthy

  telegraf:
    image: telegraf:1.29
    restart: always
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
    networks:
      - observability
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP

  influxdb:
    image: influxdb:2.7
    restart: always
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpass
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-secret-token
      - DOCKER_INFLUXDB_INIT_ORG=my-org
      - DOCKER_INFLUXDB_INIT_BUCKET=my-bucket
    networks:
      - observability
    volumes:
      - influxdb-data:/var/lib/influxdb2

  grafana:
    image: grafana/grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - influxdb
    networks:
      - observability
      - local_network
    volumes:
      #- grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    
  geoapi:
    build:
      context: ./ipinfos
      dockerfile: Dockerfile
    ports:
      - "8123:8123"
    restart: on-failure  # or 'on-failure'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123/health"]
      interval: 30s
      timeout: 15s
      retries: 2
    networks:
      - observability



networks:
  # Exposed to the public -- in use by nginx
  frontend_network:
    driver: bridge
  # Internal backend network for ODNS-API and nginx
  # nginx serves as entrypoint to the ODNS-API 
  odnsapi_network:
    driver: bridge
    internal: true 
  # Network used to isolate database from the public, nginx cannot connect to it
  # This network is only used to connect the ODNS-API, and pgadmin with Postgres DB
  postgresdb_network:
    driver: bridge
    internal: true 
  # Network for pgadmin -- only exposed to localhost
  local_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
  # Network for observability
  observability:
    driver: bridge
    internal: true 

volumes:
  # Mount shared drive for data importer
  odns_data:
    driver: local
    driver_opts:
      type: cifs
      o: "username=${SAMBA_USER},password=${SAMBA_PASSWORD},vers=3.0"
      device: "//${SAMBA_SHARE}"
  # Volume for postgres db
  postgres_data:
  data_importer_tmp:
  # InfluxDB
  influxdb-data:
